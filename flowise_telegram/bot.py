import os
import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import httpx

# 1) –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
FLOWISE_URL     = os.getenv("FLOWISE_URL", "").rstrip("/")   # –Ω–∞–ø—Ä–∏–º–µ—Ä "http://localhost:3000"
FLOWISE_API_KEY = os.getenv("FLOWISE_API_KEY")
CHATFLOW_ID     = os.getenv("CHATFLOW_ID")

# 2) –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = update.effective_user
    await update.message.reply_html(
        rf"–ü—Ä–∏–≤–µ—Ç {user.mention_html()}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ–±—Ä–∞—â—É—Å—å –∫ —Ç–≤–æ–∏–º –∑–∞–º–µ—Ç–∫–∞–º Obsidian —á–µ—Ä–µ–∑ Flowise. üôÇ"
    )

async def chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Flowise –∏ –æ—Ç–≤–µ—á–∞–µ—Ç.
    """
    question = update.message.text.strip()
    if not question:
        return

    # –°–æ–±–∏—Ä–∞–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Flowise Prediction API
    endpoint = f"{FLOWISE_URL}/api/v1/prediction/{CHATFLOW_ID}"
    payload = {"question": question}
    headers = {
        "Content-Type": "application/json",
        "x-api-key": FLOWISE_API_KEY or ""
    }

    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(endpoint, json=payload, headers=headers, timeout=30.0)
            resp.raise_for_status()
            data = resp.json()
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ—Ç–≤–µ—Ç –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ JSON
        nested = data.get("data") or {}
        answer = (
            nested.get("text")
            or nested.get("answer")
            or data.get("text")
            or data.get("answer")
            or data.get("response")
        )
        if not answer:
            answer = "‚ùå Flowise –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
    except httpx.HTTPStatusError as hx:
        status = hx.response.status_code
        body = hx.response.text
        logger.error(f"Flowise –≤–µ—Ä–Ω—É–ª HTTP {status}: {body}")
        if status == 401:
            answer = "üö® –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ FLOWISE_API_KEY –∏ CHATFLOW_ID."
        else:
            answer = f"üö® –û—à–∏–±–∫–∞ Flowise {status}: {body}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Flowise: {e}")
        answer = "üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Flowise. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(answer)

def main():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞.
    """
    if not TELEGRAM_TOKEN or not FLOWISE_URL or not CHATFLOW_ID:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")
        return

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == "__main__":
    main()